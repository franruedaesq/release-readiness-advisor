name: Deploy Release Advisor

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Get values from Terraform outputs to use in the workflow
env:
  ECR_REPOSITORY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/release-readiness-advisor/backend
  EC2_HOST: ${{ secrets.EC2_PUBLIC_IP }} # We will set this secret later

jobs:
  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          docker build -t $ECR_REPOSITORY:latest -t $ECR_REPOSITORY:${{ github.sha }} ./apps/backend
          docker push $ECR_REPOSITORY --all-tags

  deploy-to-ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push-image

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve

      - name: Get EC2 Public IP from Terraform Output
        id: terraform-output
        working-directory: ./terraform
        run: echo "ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT

      - name: Deploy to EC2 instance via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.terraform-output.outputs.ip }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # Login to ECR on the EC2 instance
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

            # Copy the latest docker-compose file to the EC2 instance
            # Note: For this to work, docker-compose.prod.yml must be in the repo
            scp -o StrictHostKeyChecking=no docker-compose.prod.yml ubuntu@${{ steps.terraform-output.outputs.ip }}:~/docker-compose.yml

            # Pull the new image and restart the services
            cd ~
            docker-compose pull
            docker-compose up -d --force-recreate
